use enumflags2::bitflags;

#[derive(Copy, Clone, Debug, PartialEq)]
pub struct AutomapOffset {
    x: i32,
    y: i32,
}

impl std::fmt::Display for AutomapOffset {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "({}, {})", self.x, self.y)
    }
}

#[repr(u8)]
#[derive(Copy, Clone, Debug, PartialEq)]
pub enum Difficulty {
    Normal = 0x00,
    Nightmare = 0x01,
    Hell = 0x02,
}

#[bitflags]
#[repr(u32)]
#[derive(Copy, Clone, Debug, PartialEq)]
pub enum ArenaFlags {
    Unknown0b00000000000000000000000000000001 = (1 << 0),  // 0x1
    Unknown0b00000000000000000000000000000010 = (1 << 1),  // 0x2
    Unknown0b00000000000000000000000000000100 = (1 << 2),  // 0x4 Always set
    Unknown0b00000000000000000000000000001000 = (1 << 3),  // 0x8
    Unknown0b00000000000000000000000000010000 = (1 << 4),  // 0x10
    Unknown0b00000000000000000000000000100000 = (1 << 5),  // 0x20
    Unknown0b00000000000000000000000001000000 = (1 << 6),  // 0x40
    Unknown0b00000000000000000000000010000000 = (1 << 7),  // 0x80
    Unknown0b00000000000000000000000100000000 = (1 << 8),  // 0x100
    Unknown0b00000000000000000000001000000000 = (1 << 9),  // 0x200
    Unknown0b00000000000000000000010000000000 = (1 << 10), // 0x400
    Hardcore                                  = (1 << 11), // 0x800
    Unknown0b00000000000000000001000000000000 = (1 << 12), // 0x1000
    Unknown0b00000000000000000010000000000000 = (1 << 13), // 0x2000
    Unknown0b00000000000000000100000000000000 = (1 << 14), // 0x4000
    Unknown0b00000000000000001000000000000000 = (1 << 15), // 0x8000
    Unknown0b00000000000000010000000000000000 = (1 << 16), // 0x10000
    Unknown0b00000000000000100000000000000000 = (1 << 17), // 0x20000
    Unknown0b00000000000001000000000000000000 = (1 << 18), // 0x40000
    Unknown0b00000000000010000000000000000000 = (1 << 19), // 0x80000
    Expansion                                 = (1 << 20), // 0x100000
    Unknown0b00000000001000000000000000000000 = (1 << 21), // 0x200000
    Unknown0b00000000010000000000000000000000 = (1 << 22), // 0x400000
    Unknown0b00000000100000000000000000000000 = (1 << 23), // 0x800000
    Unknown0b00000001000000000000000000000000 = (1 << 24), // 0x1000000
    Unknown0b00000010000000000000000000000000 = (1 << 25), // 0x2000000
    Unknown0b00000100000000000000000000000000 = (1 << 26), // 0x4000000
    Unknown0b00001000000000000000000000000000 = (1 << 27), // 0x8000000
    Unknown0b00010000000000000000000000000000 = (1 << 28), // 0x10000000
    Unknown0b00100000000000000000000000000000 = (1 << 29), // 0x20000000
    Unknown0b01000000000000000000000000000000 = (1 << 30), // 0x40000000
    Unknown0b10000000000000000000000000000000 = (1 << 31), // 0x80000000
}

